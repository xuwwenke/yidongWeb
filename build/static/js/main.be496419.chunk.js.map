{"version":3,"sources":["logo.svg","TodoList/Todoing.js","TodoList/Todoinput.js","TodoList/Todone.js","TodoList/Todolist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Todoing","state","this","props","todoCount","todo","map","item","index","done","key","style","background","type","checked","width","height","onChange","chaTodo","border","onClick","delTodo","Component","Tdoinput","handleInput","e","keyCode","addTodo","target","value","handleChange","setState","n1","name","onKeyDown","Todone","doneCount","Todolist","add","msg","Count","bind","localStorage","setItem","JSON","stringify","del","a","splice","changDone","b","parse","getItem","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be496419.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\r\n\r\nexport default class Todoing extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            \r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>正在进行-----{this.props.todoCount}</h3>\r\n                <ul>\r\n                    {\r\n                        this.props.todo.map((item,index)=>{\r\n                            if(!item.done){\r\n                                return (\r\n                                    <li key={index} style={{background:'white'}}>\r\n                                        <input type=\"checkbox\" checked={item.done} style={{width:20,height:20}} onChange={()=>this.props.chaTodo(index)}/>\r\n                                        {item.todo}---<button style={{width:20,height:20,background:'#ddd',border:1}} onClick={()=>this.props.delTodo(index)}></button>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Tdoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            \r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            n1: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input name=\"n1\" onChange={this.handleChange} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Todone extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>已经完成-----{this.props.doneCount}</h3>\r\n                <ul>\r\n                    {\r\n                        this.props.todo.map((item,index)=>{\r\n                            if(item.done){\r\n                                return (\r\n                                    <li key={index} style={{background:'white'}}>\r\n                                        <input type=\"checkbox\" checked={item.done} style={{width:20,height:20}} onChange={()=>this.props.chaTodo(index)}/>\r\n                                        {item.todo}---<button style={{width:20,height:20,background:'#ddd',border:1}} onClick={()=>this.props.delTodo(index)}></button>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\nimport Todone from './Todone';\r\n\r\n// var t=0;\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            todo:JSON.parse(localStorage.getItem('t'))||[],\r\n            todoCount:0,\r\n            doneCount:0\r\n        }\r\n    }\r\n    //添加\r\n    add=(msg)=>{\r\n        var value={todo:msg,done:false};\r\n        var todo=[...this.state.todo,value];\r\n        this.Count();\r\n        this.setState(\r\n            {todo:todo},\r\n            this.Count.bind(this)\r\n        )\r\n        // var time=new Date().getTime();\r\n        // t=time;\r\n        localStorage.setItem('t',JSON.stringify(todo));\r\n        // console.log(todo.length);\r\n    }\r\n    //删除\r\n    del=(a)=>{\r\n        var todo=[...this.state.todo];\r\n        todo.splice(a,1);\r\n        this.setState(\r\n            {todo:todo},\r\n            this.Count.bind(this)\r\n        )\r\n        // localStorage.clear();\r\n        // localStorage.removeItem('re',JSON.stringify(todo));\r\n        localStorage.setItem('t',JSON.stringify(todo));\r\n    }\r\n    //修改\r\n    changDone=(b)=>{\r\n        var todo=[...this.state.todo];\r\n        if(todo[b].done==true){\r\n            todo[b].done=false;\r\n        }else{\r\n            todo[b].done=true;\r\n        }\r\n        this.setState(\r\n            {todo:todo},\r\n            this.Count.bind(this)\r\n        )\r\n        localStorage.setItem('t',JSON.stringify(todo));\r\n    }\r\n    //统计数量\r\n    Count=()=>{\r\n        var todoCount=0,doneCount=0;\r\n        this.state.todo.map((item)=>{\r\n            if(!item.done){\r\n                todoCount++;\r\n            }else{\r\n                doneCount++;\r\n            }\r\n        });\r\n        this.setState(\r\n            {todoCount:todoCount,doneCount:doneCount}\r\n        )\r\n    }\r\n    //\r\n    componentDidMount() {\r\n        var todo=JSON.parse(localStorage.getItem('t'))\r\n        if(todo){\r\n            this.setState({\r\n                todo: todo\r\n            })\r\n        }\r\n        this.Count();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>TodoList</h1>\r\n                <Todoinput addTodo={this.add}/>\r\n                <Todoing todo={this.state.todo} delTodo={this.del} chaTodo={this.changDone} todoCount={this.state.todoCount}/>\r\n                <Todone todo={this.state.todo} delTodo={this.del} chaTodo={this.changDone} doneCount={this.state.doneCount}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todolist from './TodoList/Todolist';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todolist/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}